/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Maria Chrysafis (Olympia)
 */



#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <iomanip>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <string>
#include <random>
using namespace std;
class CDynastyPuzzles {
public:
	void solve(std::istream& in, std::ostream& out) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n;
        in >> n;
        vector<string> v(n);
        int dp[26][26];
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                dp[i][j] = -2 * n;
            }
        }
        for (int i = 0; i < n; i++) {
            in >> v[i];
            int start = v[i][0] - 'a';
            int end = v[i][v[i].size() - 1] - 'a';
            for (int j = 0; j < 26; j++) {
                int x = dp[j][start] + v[i].length();
                int y = dp[j][end];
                dp[j][end] = max(x, y);
            }
            dp[start][end] = max((int)v[i].length(), dp[start][end]);
        }
        int myMax = 0;
        for (int i = 0; i < 26; i++) {
            myMax = max(myMax, dp[i][i]);
        }
        out << myMax;
	}
};


int main() {
	CDynastyPuzzles solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
