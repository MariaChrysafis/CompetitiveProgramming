    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <fstream>
     
    #include <iostream>
    #include <map>
    #include <vector>
    using namespace std;
    class CPolycarpRestoresPermutation {
    public:
    	void solve(std::istream& in, std::ostream& out) {
    	  //1,2,3 -> 6
    	  //x, x - 2, x - 2 + 1 --> 3x - 3 = 6
    	  long long n;
    	  in >> n;
    	  int arr[n - 1];
    	  long long sum = 0;
    	  for(int i = 0; i < n - 1; i++){
    	    in >> arr[i];
    	    sum += arr[i] * (n - i - 1);
    	  }
    	  //n * x + sum = n * (n + 1)/2
    	  long long ans = n * (n + 1)/2;
    	  int x = (ans - sum)/n;
    	  vector<int> v;
    	  v.push_back(x);
    	  int prev = x;
    	  for(int i = 0; i < n - 1; i++){
    	    v.push_back(prev + arr[i]);
    	    prev += arr[i];
    	  }
    	  map<int,int> oc;
    	  for(int i: v){
    	    oc[i]++;
    	  }
    	  for(int i = 0; i < n; i++){
    	    if(oc[i + 1] != 1){
    	      out << -1 << endl;
    	      return;
    	    }
    	  }
    	  for(int i: v){
    	    out << i << " ";
    	  }
    	}
    };
     
     
    int main() {
    	CPolycarpRestoresPermutation solver;
    	std::istream& in(std::cin);
    	std::ostream& out(std::cout);
    	solver.solve(in, out);
    	return 0;
    }
