/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
long long max3(long long a, long long b, long long c){
  return max(max(a,b),c);
}
bool comp(int a, int b){
  return (a < b);
}
class DColoredRectangles {
public:
    int R,G,B;
    static const int MAX = 201;
    long long dp[MAX][MAX][MAX];
    vector<int> red;
    vector<int> green;
    vector<int> blue;
    long long rec(int a, int b, int c){
      if(a < -1 || b < -1 || c < -1){
        return 0;
      }
      if((a < 0) + (b < 0) + (c < 0) >= 2){
        return false;
      }
      if(a < 0 || b < 0 || c < 0){
        if(a < 0){
          return rec(a, b - 1, c - 1) + green[b] * blue[c];
        }
        if(b < 0){
          return rec(a - 1, b, c - 1) + red[a] * blue[c];
        }
        return rec(a - 1, b - 1, c) + red[a] * green[b];
      }
      if(a >= 0 && b >= 0 && c >= 0 && dp[a][b][c] != -1){
        return dp[a][b][c];
      }
      long long v1 = rec(a - 1, b - 1, c) + red[a] * green[b];
      long long v2 = rec(a,b - 1, c - 1) + green[b] * blue[c];
      long long v3 = rec(a - 1, b, c - 1) + red[a] * blue[c];
      long long ans = max3(v1,v2,v3);
      if(a >= 0 && b >= 0 && c >= 0) dp[a][b][c] = ans;
      return ans;
    }
	void solve(std::istream& in, std::ostream& out) {
      ios_base::sync_with_stdio(false);
      cin.tie(NULL);
      in >> R >> G >> B;
      red.resize(R);
      green.resize(G);
      blue.resize(B);
      for(int i = 0; i < R; i++){
        in >> red[i];
      }
      for(int i = 0; i < G; i++){
        in >> green[i];
      }
      for(int i = 0; i < B; i++){
        in >> blue[i];
      }
      for(int i = 0; i < MAX; i++){
        for(int j = 0; j < MAX; j++){
          for(int k = 0; k < MAX; k++){
            dp[i][j][k] = -1;
          }
        }
      }
      sort(red.begin(),red.end(), comp);
      sort(green.begin(),green.end(), comp);
      sort(blue.begin(),blue.end(), comp);
      long long x = rec(R - 1, G - 1, B - 1);
      out << x << endl;
	}
};


int main() {
	DColoredRectangles solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
