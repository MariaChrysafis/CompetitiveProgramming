/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <vector>
using namespace std;
int k;
class DMaxMedian {
public:
  vector<int> arr;
  vector<int> transform(int x){
    vector<int> v;
    for(int i: arr){
      if(i >= x){
        v.push_back(1);
      }else{
        v.push_back(-1);
      }
    }
    return v;
  }
  bool valid(int x){
    vector<int> v = transform(x);
    int pref[v.size() + 1];
    pref[0] = 0;
    for(int i = 1; i <= v.size(); i++){
      pref[i] = pref[i - 1] + v[i - 1];
    }
    int myMax = pref[k], myMin = 0;
    for(int i = k; i < v.size(); i++){
      myMin = min(myMin, pref[i - k + 1]);
      myMax = max(myMax, pref[i + 1] - myMin);
    }
    return (myMax > 0);
  }
  int binSearch(int l, int r){
    if(l > r){
      return -1;
    }
    if(l == r){
      return l;
    }
    //first invalid
    int mid = (l + r)/2;
    if(valid(mid)){
      return binSearch(mid + 1, r);
    }else{
      return binSearch(l, mid);
    }
  }
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n >> k;
    arr.resize(n);
    for(int i = 0; i < n; i++){
      in >> arr[i];
    }
    out << binSearch(0, n + 1) - 1 << endl;
  }
};
 
 
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	DMaxMedian solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
  //solver.solve(cin, cout);
	return 0;
}
