/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>


#include <algorithm>
#include <vector>
using namespace std;
class CThreeBags {
public:
  long long DOSTUFF(vector<int> v1, vector<int> v2, vector<int> v3){
    if(v3.size() != 1){
      swap(v1,v3);
    }
    if(v2.size() != 1){
      swap(v1,v2);
    }
    long long sum = 0;
    for(int i: v1){
      sum += i;
    }
    vector<long long> v = {sum, v2[0],v3[0]};
    sort(v.begin(),v.end());
    return v[2] - (v[0] - v[1]);
  }
  void solve(std::istream& in, std::ostream& out) {
    long long arr[3];
    int cntr;
    for(long long i = 0; i < 3; i++){
      in >> arr[i];
      if(arr[i] == 1) cntr++;
    }
    vector<int> b[3];
    vector<long long> best;
    long long sum = 0;
    for(long long i = 0; i < 3; i++){
      b[i].resize(arr[i]);
      for(long long j = 0; j < arr[i]; j++){
        in >> b[i][j];
        sum += b[i][j];
      }
      sort(b[i].begin(), b[i].end());
      reverse(b[i].begin(), b[i].end());
    }
    if(cntr == 2){
      long long ANS = DOSTUFF(b[0],b[1],b[2]);
      out << ANS << endl;
      return;
    }
    for(long long i = 0; i < 3; i++){
      best.push_back(i);
    }
    long long myMax = -1000000000000000;
    for(long long i = 0; i < best.size(); i++){
      long long row = best[i];
      long long sum = 0;
      for(long long j = 0; j < 3; j++){
        if(j == row){
          continue;
        }
        for(long long k = 0; k < b[j].size() - 1; k++){
          sum += b[j][k];
        }
      }
      //b[row][b[row].size() - 1] -= sum;
      long long x, y;
      if(row == 0){
        x = b[2][b[2].size() - 1];
        y = b[1][b[1].size() - 1];
      }
      if(row == 1){
        x = b[0][b[0].size() - 1];
        y = b[2][b[2].size() - 1];
      }
      if(row == 2){
        x = b[0][b[0].size() - 1];
        y = b[1][b[1].size() - 1];
      }
      //long long ans = best(x,y,b[row]) - b[row][b[row].size() -1 ];
      long long SUM = 0;
      for(long long i: b[row]){
        SUM += i;
      }
      SUM -= b[row][b[row].size() - 1];
      vector<long long> v = {x, SUM, y};
      sort(v.begin(), v.end());
      SUM = v[2] - (v[0] - v[1]);
      v = {SUM, b[row][b[row].size() - 1], sum};
      sort(v.begin(), v.end());
      myMax = max(v[2] - (v[0] - v[1]), myMax);
    }
    out << myMax << endl;
  }
};


int main() {
	CThreeBags solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
