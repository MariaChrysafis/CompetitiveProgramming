/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Maria Chrysafis (Olympia)
 */



#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <iomanip>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <string>
#include <random>
using namespace std;
class EKBalancedTeams {
public:
    void solve(std::istream& in, std::ostream& out) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n, k;
        in >> n >> k;
        vector<int> v(n);
        for (int i = 0; i < n; i++) {
            in >> v[i];
        }
        sort(v.begin(), v.end());
        int dp[n + 1][k + 1]; //max # of students if we consider i things and have j teams
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (j == 0) {
                    dp[i][j] = 0;
                    continue;
                }
                if (j > i) {
                    dp[i][j] = -10000;
                    continue;
                }
                int l = 0;
                int r = i - 1;
                while (l != r) {
                    int m = (l + r)/2;
                    if (v[i - 1] - v[m] <= 5) {
                        r = m;
                    } else {
                        l = m + 1;
                    }
                }
                dp[i][j] = dp[i - 1][j];
                dp[i][j] = max(dp[i][j], dp[l][j - 1] + i - l);
            }
        }
        int myMax = 0;
        for (int i = 0; i <= k; i++) {
            myMax = max(myMax, dp[n][i]);
        }
        out << myMax;
    }
};

int main() {
	EKBalancedTeams solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
