/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Maria Chrysafis (Olympia)
 */



#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <iomanip>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <string>
#include <random>
using namespace std;
class BHyperset {
public:
    string neither (string s, string t) {
        vector<char> SET = {'S', 'E', 'T'};
        string ans = "";
        for (int i = 0; i < s.length(); i++) {
            for (char c: SET) {
                if (c != s[i] && c != t[i]) {
                    ans += c;
                    break;
                }
            }
        }
        return ans;
    }
    bool common (string s, string t) {
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == t[i]) {
                return false;
            }
        }
        return true;
    }
	void solve(std::istream& in, std::ostream& out) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n, k;
        in >> n >> k;
        vector<string> v(n);
        for (int i = 0; i < n; i++) {
            in >> v[i];
        }
        sort(v.begin(), v.end());
        vector<char> SET = {'S', 'E', 'T'};
        int cntr = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                string str;
                for (int ind = 0; ind < k; ind++) {
                    if (v[i][ind] == v[j][ind]) {
                        str += v[i][ind];
                        continue;
                    }
                    for (char c: SET) {
                        if (v[i][ind] != c && v[j][ind] != c) {
                            str += c;
                        }
                    }
                }
                int l = 0;
                int r = n - 1;
                while (l < r) {
                    //out << l << " " << r << endl;
                    int m = (l + r)/2;
                    if (v[m] < str) {
                        l = m + 1;
                    } else if (v[m] > str){
                        r = m - 1;
                    } else if (v[m] == str) {
                        l = r = m;
                        break;
                    }
                }
                if (l != r || v[l] != str) {
                    continue;
                }
                if (str == v[i] || str == v[j]) {
                    continue;
                }
                //out << v[i] << " "<< v[j] << " " << str << '\n';
                cntr++;
            }
        }
        out << cntr/6;
	}
};


int main() {
	BHyperset solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
