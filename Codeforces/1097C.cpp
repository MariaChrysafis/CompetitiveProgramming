/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <map>
#include <unordered_map>
using namespace std;
struct myStruct{
  int sum;
  int min;
};
class CYuhaoAndAParenthesis {
public:
    myStruct f(string s){
      int myMin = 0;
      int sum = 0;
      for(char i: s){
        if(i == '('){
          sum++;
        }else{
          sum--;
        }
        myMin = min(myMin,sum);
      }
      return {sum, myMin};
    }
	void solve(std::istream& in, std::ostream& out) {
      ios_base::sync_with_stdio(false);
      cin.tie(NULL);
	  int t;
	  in >> t;
	  vector<myStruct> v;
	  while(t--){
	    string s;
	    in >> s;
	    v.push_back(f(s));
	  }
      unordered_map<int,vector<int>> sm; /* maps an integer to the strings which have the desired sum */
	  bool mark[v.size()];
	  for(int i = 0; i < v.size(); i++){
	    mark[i] = false;
	    sm[v[i].sum].push_back(i);
	  }
	  long long counter = 0;
	  for(int i = 0; i < v.size(); i++){
	    if(mark[i] || v[i].sum - v[i].min != 0){
	      continue;
	    }
	    int ind = -1;
	    for(int j: sm[-v[i].sum]){
	      if(!mark[j] && j != i && v[j].min >= 0){
            ind = j;
            break;
	      }
	    }
	    if(ind == -1){
	      continue;
	    }
        mark[ind] = true;
	    mark[i] = true;
	    //out << i << " " << ind << endl;
	    counter++;
	  }
	  out << counter << endl;
	}
};


int main() {
	CYuhaoAndAParenthesis solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
