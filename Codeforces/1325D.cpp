/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
using namespace std;
class DEhabTheXorcist {
public:
	void solve(std::istream& in, std::ostream& out) {
	  int64_t u,v;
	  in >> u >> v;
	  if(u == v){
	    if(u == 0){
	      out << 0 << endl;
	      return;
	    }
	    out << 1 << endl;
	    out << u << endl;
	    return;
	  }
	  if(u % 2 != v % 2 || v < u){
	    out << -1 << endl;
	    return;
	  }
	  if(u == 0){
	    out << 2 << endl;
	    out << v/2 << " " << v/2 << endl;
	    return;
	  }
	  int64_t andVar = (v - u)/2;
	  int64_t xorVar = u;
	  bool valid = true;
	  vector<bool> v1;
	  vector<bool> v2;
	  for(int64_t i = 0; i <= 61; i++){
	    bool andDig = andVar & (1ll << i);
        bool xorDig = xorVar & (1ll << i);
        //out << xorDig << " " << andDig << endl;
        if(andDig == xorDig){
          if(andDig == 1){
            valid = false;
            break;
          }
          if(andDig == 0){
            v1.push_back(0);
            v2.push_back(0);
          }
        }else{
          if(andDig == 1){
            v1.push_back(1);
            v2.push_back(1);
          }else{
            v1.push_back(0);
            v2.push_back(1);
          }
        }
	  }
	  if(!valid){
	    out << 3 << endl;
	    out << andVar << " " << andVar << " " << u << endl;
	    return;
	  }
	  out << 2 << endl;
	  int64_t x1 = 0;
	  int64_t pwr = 1;
	  for(int i: v1){
	    x1 += pwr * i;
	    pwr *= 2;
	  }
	  out << x1 << " ";
	  //out << endl;
	  pwr = 1;
	  x1 = 0;
	  for(int j: v2){
	    x1 += pwr * j;
	    pwr *= 2;
	  }
	  out << x1 << " ";
	}
};
int main() {
	DEhabTheXorcist solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
