/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <algorithm>
#include <fstream>
#define endl '\n'
#include <iostream>
#include <set>
#include <map>
#include <vector>
#define ll long long
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using namespace std;
class CNezzarAndSymmetricArray {
  public:
  int t;
    vector<ll> convertSetToVector(vector<ll> s){
      map<ll,int> oc;
      for(ll i: s) {
        oc[i]++;
      }
      vector<ll> v;
      bool fine = false;
      for(auto p: oc){
        int x = p.second/2;
        if(p.second % 2 != 0 || p.second > 2){
          fine = true;
          continue;
        }
        //cout << x << " ";
        for(int i = 0; i < x; i++){
          v.push_back(p.first);
        }
      }
      if(fine){
        v.clear();
      }
      return v;
    }
    bool f(std::istream& in, std::ostream& out) {
      int n;
      in >> n;
      vector<ll> s;
      set<ll> se;
      //s.clear();
      for(int i = 0; i < 2 * n; i++){
        ll a; in >> a;
        s.push_back(a);
        se.insert(a);
      }
      vector<ll> v = convertSetToVector(s);
      if(n != v.size()){
        return false;
      }
      //out << "FINE" << endl;
      reverse(v.begin(), v.end());
      vector<ll> dif;
      for(int i = 1; i < v.size(); i++){
        dif.push_back(abs(v[i] - v[i - 1]));
      }
      if(v[0] % (2 * n) != 0){
        return false;
      }
      reverse(dif.begin(),dif.end());
      //sort(dif.begin(), dif.end());
      for(ll i = 0; i < dif.size(); i++) {
        if (dif[i] % (2 * i + 2) != 0) {
          //out << "NO" << endl
          return false;
        }
      }
      vector<ll> ans;
      ans.push_back(v[0]/(2 * n));
      reverse(dif.begin(), dif.end());
      for(ll i = 0; i < dif.size(); i++){
        dif[i] /= (2 * dif.size() - 2 * i);
        ll prev = ans.back();
        ans.push_back(prev - dif[i]);
      }
      for(ll i: ans){
        if(i <= 0){
          return false;
        }
      }
      return true;
    }
    void solve(std::istream& in, std::ostream& out) {
      in >> t;
      while (t--){
        bool b = f(in, out);
        if(b){
          out << "YES" << endl;
        }else{
          out << "NO" << endl;
        }
      }
    }
};
 
 
int main() {
	CNezzarAndSymmetricArray solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
