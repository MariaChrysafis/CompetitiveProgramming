/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <algorithm>
#include <fstream>
 
#include <iostream>
#include <vector>
#include <algorithm>
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using namespace std;
class AMeximization {
  public:
    void f(std::istream& in, std::ostream& out) {
      int n;
      in >> n;
      vector<int> v(n);
      bool valid[101];
      int oc[101];
      for(int i = 0; i < 101; i++){
        valid[i] = false;
        oc[i] = 0;
      }
      for(int i = 0; i < n; i++){
        in >> v[i];
        oc[v[i]]++;
      }
      for(int i = 0; i < 101; i++){
        if(oc[i]){
          oc[i]--;
          out << i << " ";
        }else{
          break;
        }
      }
      for(int i = 0; i < n; i++){
        if(oc[v[i]] == 0) continue;
        else{
          out << v[i] << " ";
          oc[v[i]]--;
        }
      }
      out << endl;
    }
    void solve(std::istream& in, std::ostream& out) {
      int t;
      in >> t;
      while(t--){
        f(in, out);
      }
    }
};
 
 
int main() {
	AMeximization solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
