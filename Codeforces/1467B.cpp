    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <fstream>
     
    #include <iostream>
    #include <vector>
    using namespace std;
    class BHillsAndValleys {
    public:
        vector<int> arr;
        vector<char> myChar;
        bool hill(int a, int b, int c){
          return (b > a && b > c);
        }
        bool valley(int a, int b, int c){
          return (b < a && b < c);
        }
        bool hv(int a, int b, int c){
          return (hill(a,b,c) || valley(a, b, c));
        }
        int replace(int x, int ind){
          int n = arr.size();
          int dum = arr[ind];
          arr[ind] = x;
          int change = 0;
          for(int i = ind - 1; i <= ind + 1; i++){
            if(i - 1 < 0 || i + 1 >= n){
              continue;
            }
            if(myChar[i] != '0'){
              if(!hv(arr[i - 1], arr[i], arr[i + 1])){
                change++;
              }
              continue;
            }
            if(hv(arr[i - 1], arr[i], arr[i + 1])){
              change--;
            }
          }
          arr[ind] = dum;
          return change;
        }
        void f(std::istream& in, std::ostream& out) {
          int n;
          in >> n;
          arr.resize(n);
          for(int i = 0; i < n; i++){
            in >> arr[i];
          }
          myChar.resize(n);
          int ans = 0;
          for(int i = 1; i < n - 1; i++){
            if(hv(arr[i - 1], arr[i], arr[i + 1])){
              myChar[i] = '1';
              ans++;
            }else{
              myChar[i] = '0';
            }
          }
          int myMax = 0;
          for(int i = 1; i < n - 1; i++){
            //out << replace(arr[i + 1],i) << " " << replace(arr[i - 1], i) << endl;
            myMax = max(myMax,replace(arr[i + 1],i));
            myMax = max(myMax,replace(arr[i - 1],i));
          }
          out << ans - myMax << endl;
        }
    	void solve(std::istream& in, std::ostream& out) {
          int t;
          in >> t;
          while(t--){
            f(in, out);
          }
    	}
    };
     
     
    int main() {
    	BHillsAndValleys solver;
    	std::istream& in(std::cin);
    	std::ostream& out(std::cout);
    	solver.solve(in, out);
    	return 0;
    }
