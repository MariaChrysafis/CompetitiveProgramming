/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <fstream>
 
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
 
 
 
 
#include <map>
#include <algorithm>
#include <vector>
#include <set>
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using namespace std;
class DEpicTransformation {
public:
  void f(std::istream& in, std::ostream& out) {
    long long n;
    in >> n;
    long long arr[n];
    for(int i = 0; i < n; i++){
      in >> arr[i];
    }
    multiset<long long> s;
    set<int> s1;
    for(long long i: arr){
      s.insert(i);
      s1.insert(i);
    }
    vector<int> v;
    for(auto it = s1.begin(); it != s1.end(); it++){
      long long x = *it;
      v.push_back(s.count(x));
    }
    int sm = 0;
    for(int i: v){
      sm += i;
    }
    sort(v.begin(), v.end());
    long long l = sm - 2 * v[v.size() - 1];
    if(l < 0){
      out << -l << endl;
      return;
    }
    if(l >= 0){
      out << (n % 2) << endl;
      return;
    }
    out << l << endl;
  }
  void solve(std::istream& in, std::ostream& out) {
    int t;
    in >> t;
    while(t--){
      f(in, out);
    }
  }
};
 
int main() {
	DEpicTransformation solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
