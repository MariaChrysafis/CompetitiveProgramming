/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
//Created by Maria Chrysafis
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class CLongestSimpleCycle {
public:
  vector<long long> c;
  vector<long long> b;
  vector<long long> a;
  vector<long long> s;
  vector<pair<long long,long long>> e;
  long long ANS(int n){
    long long counter = 0;
    long long myMax = 0;
    for(int i = 0; i < n - 1; i++){
      counter += s[i];
      if(c[i + 1] == b[i + 1]){
        counter = s[i];
      }
      myMax = max(myMax,counter);
      counter -= 2 * abs(e[i + 1].second - e[i + 1].first);
      if(counter < 0){
        counter = 0;
      }
    }
    return myMax;
  }
  void f(std::istream& in, std::ostream& out) {
    int n;
    in >> n;
    c.resize(n);
    a.resize(n);
    b.resize(n);
    e.resize(n);
    for(int i = 0; i < n; i++){
      in >> a[i];
    }
    for(int i = 0; i < n; i++){
      in >> b[i];
    }
    for(int i = 0; i < n; i++){
      in >> c[i];
    }
    for(int i = 1; i < n; i++){
      e[i - 1] = {b[i], c[i]};
    }
    e[n - 1] = {1,a[n - 1]};
    s.resize(n - 1);
    for(int i = 0; i < n - 1; i++){
      s[i] = abs(a[i + 1] - 1) + abs(c[i + 1] - b[i + 1]) + 2;
    }
    long long myMax = ANS(n);
    out << myMax << endl;
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    in >> t;
    while(t--){
      f(in, out);
    }
  }
};
 
 
int main() {
	CLongestSimpleCycle solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
