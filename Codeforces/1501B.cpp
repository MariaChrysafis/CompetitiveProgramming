/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <algorithm>
#include <fstream>

#include <iostream>
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using namespace std;
class BNapoleonCake {
  public:
    void f(std::istream& in, std::ostream& out) {
      int n;
      in >> n;
      int arr[n];
      bool valid[n];
      for(int i = 0; i < n; i++){
        in >> arr[i];
        valid[i] = false;
      }
      reverse(arr, arr + n);
      for(int i = 0; i < arr[0]; i++){
        valid[i] = true;
      }
      int lastVal = arr[0] - 1;
      for(int i = 1; i < n; i++){
        if(i + arr[i] - 1 <= lastVal){
          continue;
        }else{
          for(int j = i; j < min(arr[i] + i, n); j++){
            valid[j] = true;
            lastVal = arr[i] + i - 1;
          }
        }
      }
      reverse(valid, valid + n);
      for(bool b: valid){
        out << b << " ";
      }
      out << endl;
    }
    void solve(std::istream& in, std::ostream& out) {
      int t;
      in >> t;
      while(t--){
        f(in, out);
      }
    }
};


int main() {
	BNapoleonCake solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
