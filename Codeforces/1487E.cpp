/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <fstream>
 
 
 
#include <queue>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
class ECheapDinner {
public:
  const long long INF = 100000000000;
  const int MAXN = 150000;
  void solve(std::istream &in, std::ostream &out) {
    int n[4];
    in >> n[0] >> n[1] >> n[2] >> n[3];
    vector<vector<long long>> v(4);
    for(int i = 0; i < 4; i++){
      v[i].resize(n[i]);
      for(int j = 0; j < n[i]; j++){
        in >> v[i][j];
      }
    }
    vector<vector<long long>> myMap[3];
    myMap[0].resize(MAXN);
    myMap[1].resize(MAXN);
    myMap[2].resize(MAXN);
    long long m[3];
    for(int i = 0; i < 3; i++){
      in >> m[i];
      for(int j = 0; j < m[i]; j++){
        long long a,b;
        in >> a >> b;
        a--;
        b--;
        myMap[i][b].push_back(a);
      }
    }
    vector<vector<long long>> dp;
    dp.resize(4);
    for(int i = 0; i < 4; i++){
      dp[i].resize(n[i]);
      for(int j = 0; j < n[i]; j++){
        dp[i][j] = INF;
      }
    }
    priority_queue<pair<int,int>> pq;
    for(int i = 0; i < n[0]; i++){
      dp[0][i] = v[0][i];
      pq.push({-v[0][i],i});
    }
    for(int i = 1; i < 4; i++){
      priority_queue<pair<int,int>> orig = pq;
      for(int j = 0; j < n[i]; j++){
        vector<long long> myVec = myMap[i - 1][j];
        sort(myVec.begin(),myVec.end());
        map<int,bool> mm;
        for(int k: myVec) mm[k] = true;
        vector<pair<int,int>> added;
        while(!pq.empty()){
          int x = pq.top().second;
          //out << x << " ";
          added.push_back(pq.top());
          pq.pop();
          bool b = mm[x];
          if(!b){
            dp[i][j] = min(dp[i - 1][x] + v[i][j],dp[i][j]);
            break;
          }
        }
        for(pair<int,int> p: added){
          pq.push(p);
        }
        //pq = orig;
      }
      pq = priority_queue <pair<int,int>>();
      for(int j = 0; j < n[i]; j++){
        pq.push({-dp[i][j],j});
      }
    }
    long long myMin = INF;
    for(long long j: dp[3]){
      myMin = min(myMin, j);
    }
    if(myMin == INF){
      out << -1 << endl;
      return;
    }
    out << myMin << endl;
  }
};
 
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	ECheapDinner solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
