/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <fstream>


#include <vector>
#include <map>
using namespace std;
class CMinimumTies {
public:
  int opp(int x){
    if(x == -1) return 1;
    return -1;
  }
  void f(std::istream &in, std::ostream &out, int n){
    int arr[n][n];
    if(n % 2 == 1) {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
          if((i + j) % 2 == 0){
            arr[i][j] = -1;
          }else{
            arr[i][j] = 1;
          }
        }
      }
      for(int i = 0; i < n; i++){
        for(int j = i + 1; j < n; j++){
          out << arr[i][j] << " ";
        }
      }
    }else{
      for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
          arr[i][j] = 100;
        }
      }
      //return ;
      for(int i = 0; i < n; i+=2){
        arr[i][(i + 1) % n] = 0;
        arr[(i + 1) % n][i] = 0;
      }
        int w = 0;
        int l = 0;
        for(int j = 1; j < n; j++){
          if(arr[0][j] == 0) continue;
          if(w > l){
            l++;
            arr[0][j] = -1;
          }else{
            w++;
            arr[0][j] = 1;
          }
        }
      for(int i = 1; i < n; i++){
        for(int j = i + 1; j < n; j++){
          if(arr[i][j] == 0) continue;
          arr[i][j] = opp(arr[i - 1][j]);
        }
      }
      for(int i = 0; i < n; i++){
        for(int j = i + 1; j < n; j++){
          out << arr[i][j] << " ";
        }
      }
      }
  }
  void solve(std::istream &in, std::ostream &out) {
    int t;
    in >> t;
    while(t--){
      int n;
      in >> n;
      f(in, out, n);
      out << endl;
    }
  }
};

int main() {
	CMinimumTies solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
