/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
using namespace std;
struct foo{
  int GCD;
  int oc;
};
int greatestCommonDivisor(int a, int b){
  if(a > b){
    swap(a,b);
  }
  if(a == 0){
    return b;
  }
  return greatestCommonDivisor(b % a, a);
}
pair<int,int> merge(pair<int,int> p1, pair<int,int> p2){
  return make_pair(p1.first,p2.second);
}
int cl(int x){
  int pwr = 1;
  while(pwr < x){
    pwr *= 2;
  }
  return pwr;
}
foo comp(foo f1, foo f2){
  if(f1.oc == -1){
    return f2;
  }
  if(f2.oc == -1){
    return f1;
  }
  if(f1.GCD == f2.GCD){
    return {f1.GCD, f1.oc + f2.oc};
  }
  int g1 = greatestCommonDivisor(f1.GCD,f2.GCD);
  if(g1 == f1.GCD){
    return {f1.GCD,f1.oc};
  }
  if(g1 == f2.GCD){
    return {f2.GCD,f2.oc};
  }
  return {g1,0};
}

class FAntColony {
public:
    struct segmentTree{
      vector<int> v;
      vector<pair<int,int>> vec;
      vector<foo> arr;
      foo build(int ind){
        if(ind >= v.size() - 1){
          arr[ind] = {v[ind - (v.size() - 1)],1};
          return arr[ind];
        }
        arr[ind] = comp(build(2 * ind + 1), build(2 * ind + 2));
        return arr[ind];
      }
      pair<int,int> build2(int ind){
        if(ind >= v.size() - 1){
          int x = ind - (v.size() - 1);
          vec[ind] = make_pair(x,x);
          return vec[ind];
        }
        vec[ind] = merge(build2(2 * ind + 1),build2(2 * ind + 2));
        return vec[ind];
      }
      foo interval(int i, int L, int R){
        if(vec[i].first > R || vec[i].second < L){
          return {0,-1};
        }
        if(vec[i].first >= L && vec[i].second <= R){
          return arr[i];
        }
        foo a = interval(2 * i + 1, L, R);
        foo b = interval(2 * i + 2, L, R);
        return comp(a,b);
      }
    };
	void solve(std::istream& in, std::ostream& out) {
	  int n;
	  in >> n;
	  int x = cl(n);
	  vector<int> v;
	  v.resize(x);
	  for(int i = 0; i < n; i++){
	    in >> v[i];
	  }
	  for(int i = n; i < x; i++){
	    v[i] = 0;
	  }
	  segmentTree segTree;
	  vector<pair<int,int>> vec;
	  vec.resize(2 * x);
	  vector<foo> arr;
	  arr.resize(2 * x);
	  segTree.v = v;
	  segTree.vec = vec;
	  segTree.arr = arr;
      segTree.build2(0);
	  segTree.build(0);
	  int q;
	  in >> q;
	  while(q--){
	    int L,R;
	    in >> L >> R;
	    L--;
	    R--;
	    foo ans = segTree.interval(0,L,R);
	    out << R - L + 1 - ans.oc << endl;
	  }
	}
};


int main() {
	FAntColony solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
