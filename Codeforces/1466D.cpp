/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <queue>
using namespace std;
class D13thLabourOfHeracles {
public:
    void f(std::istream& in, std::ostream& out) {
      int n;
      in >> n;
      long long w[n];
      long long d[n];
      long long sum = 0;
      for(int i = 0; i < n; i++){
        in >> w[i];
        sum += w[i];
        d[i] = 0;
      }
      for(int i = 0; i < n - 1; i++){
        int u,v;
        in >> u >> v;
        u--;
        v--;
        d[u]++;
        d[v]++;
      }
      priority_queue<pair<long long,long long>> pq;
      for(int i = 0; i < n; i++){
        pq.push({w[i],d[i]});
      }
      out << sum << " ";
      while(!pq.empty()){
        long long weight = pq.top().first;
        long long deg = pq.top().second;
        pq.pop();
        while(deg != 1){
          sum += weight;
          out << sum << " ";
          deg--;
        }
      }
      out << endl;
    }
	void solve(std::istream& in, std::ostream& out) {
	  int t;
	  in >> t;
	  while(t--){
	    f(in, out);
	  }
	}
};
 
 
int main() {
	D13thLabourOfHeracles solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
