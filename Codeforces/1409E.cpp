/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
using namespace std;
struct interval{
  int r;
  int weight;
};
class ETwoPlatforms {
public:
    void f(std::istream& in, std::ostream& out) {
      int n, k;
      in >> n >> k;
      vector<pair<int,int>> v;
      map<int,int> oc;
      vector<int> inp;
      for(int i = 0; i < n; i++){
        int x;
        in >> x;
        inp.push_back(x);
        oc[x]++;
      }
      for(int i = 0; i < n; i++){
        int y;
        in >> y;
      }
      for(int i: inp){
        if(oc[i] == 0){
          continue;
        }
        v.push_back({i,oc[i]});
        oc[i] = 0;
      }
      sort(v.begin(),v.end());
      vector<interval> left;
      int rightInd = -1;
      int sum = 0;
      for(int i = 0; i < v.size(); i++){
        if(i != 0){
          sum -= v[i - 1].second;
        }
        while(rightInd + 1 < v.size() && abs(v[i].first - v[rightInd + 1].first) <= k){
          rightInd++;
          sum += v[rightInd].second;
        }
        left.push_back({rightInd,sum});
        if(sum == n){
          out << n << endl;
          return;
        }
      }
      n = left.size();
      int pref[n];
      int suf[n];
      for(int i = 0; i < n; i++){
        pref[i] = suf[i] = 0;
      }
      suf[n - 1] = left[n - 1].weight;
      for(int i = n - 2; i >= 0; i--){
        suf[i] = max(suf[i + 1],left[i].weight);
      }
      for(int i = 0; i < left.size(); i++){
        pref[left[i].r] = max(left[i].weight,pref[left[i].r]);
      }
      for(int i = 1; i < left.size(); i++){
        pref[i] = max(pref[i - 1], pref[i]);
      }
      int x = 0;
      for(int i = 0; i < n - 1; i++){
        //let the ith coordinate be the "bounding" one
        x = max(pref[i] + suf[i + 1], x);
      }
      out << x << endl;
    }
	void solve(std::istream& in, std::ostream& out) {
	  int t;
	  in >> t;
	  while(t--){
	    f(in, out);
	  }
	}
};


int main() {
	ETwoPlatforms solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
