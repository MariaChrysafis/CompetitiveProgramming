/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cmath>
#include <vector>
using namespace std;
class DCeilDivisions {
public:
    int INFTY = 1000000;
    int ceil(int a, int b){
      //ceiling of a/b
      return a/b + (a % b != 0);
    }
    int numMoves(int a, int b){
      int counter = 0;
      while (true){
        counter++;
        if(a == b){
          break;
        }
        if(a > b){
          a = ceil(a,b);
        }else{
          b = ceil(b,a);
        }
        if(counter > 7){
          break;
        }
      }
      if(a != 2){
        return INFTY;
      }
      return counter;
    }
    void f(std::istream& in, std::ostream& out){
      int n;
      in >> n;
      vector<pair<int,int>> ans;
      int x;
      for(x = 2; x < n; x++){
        if(numMoves(x,n) <= 7){
          break;
        }
      }
      for(int i = 1; i < n; i++){
        if(i == x) {
          continue;
        }
        ans.push_back({i, n});
      }
      //left with x and n
      int a = n;
      int b = x;
      while (true){
        if(a == b){
          break;
        }
        if(a > b){
          a = ceil(a,b);
          ans.push_back({n,x});
        }else{
          b = ceil(b,a);
          ans.push_back({x,n});
        }
      }
      out << ans.size() + 1 << endl;
      for(pair<int,int> p: ans){
        out << p.first << " " << p.second << endl;
      }
      out << n << " " << x << endl;
    }
	void solve(std::istream& in, std::ostream& out) {
	  int t;
	  in >> t;
	  while(t--){
	    f(in, out);
	  }
	}
};


int main() {
	DCeilDivisions solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
