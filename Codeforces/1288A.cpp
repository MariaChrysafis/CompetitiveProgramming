    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <algorithm>
    #include <fstream>
     
    #include <iostream>
    #include <cmath>
    #pragma GCC target ("avx2")
    #pragma GCC optimization ("O3")
    #pragma GCC optimization ("unroll-loops")
    #pragma optimization_level 3
    #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
    #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
    using namespace std;
    class ADeadline {
      public:
        bool pos(int d, int n, int x){
          if(x < 0) return false;
          return (x + ceil((1.0 * d)/(1.0 * x + 1.0)) <= n);
        }
        bool f(std::istream& in, std::ostream& out){
          int n, d;
          in >> n >> d;
          bool b1 = pos(d, n, sqrt(d));
          bool b2 = pos(d, n, sqrt(d) + 1);
          bool b3 = pos(d, n, sqrt(d) - 1);
          return b1 || (b2 || b3);
        }
        void solve(std::istream& in, std::ostream& out) {
          int t;
          in >> t;
          while(t--){
            bool b = f(in, out);
            if(b){
              out << "YES" << endl;
            }else{
              out << "NO" << endl;
            }
          }
        }
    };
     
     
    int main() {
    	ADeadline solver;
    	std::istream& in(std::cin);
    	std::ostream& out(std::cout);
    	solver.solve(in, out);
    	return 0;
    }
