/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;
class CCaninePoetry {
public:
    void f(std::istream& in, std::ostream& out) {
      string s;
      in >> s;
      string str = s;
      map<int,vector<int>> adj;
      for(int i = 0; i < s.length() - 1; i++){
        if(str[i] == str[i + 1]){
          adj[i].push_back(i + 1);
          adj[i + 1].push_back(i);
        }
      }
      for(int i = 0; i < s.length(); i+=2){
        if(i + 2 < s.length() && s[i] == s[i + 2]){
          adj[i].push_back(i + 2);
          adj[i + 2].push_back(i);
        }
      }
      for(int i = 1; i < s.length(); i+=2){
        if(i + 2 < s.length() && s[i] == s[i + 2]){
          adj[i].push_back(i + 2);
          adj[i + 2].push_back(i);
        }
      }
      int n = s.length();
      bool mark[n];
      bool taken[n];
      for(int i = 0; i < n; i++){
        mark[i] = false;
      }
      for(int i = 0; i < n; i++){
        if(adj[i].size() == 0){
          taken[i] = false;
          continue;
        }
        if(!mark[i]){
          taken[i] = false;
          for(int j: adj[i]){
            mark[j] = true;
          }
        }else{
          taken[i] = true;
        }
      }
      int sum = 0;
      for(int i = 0; i < n; i++){
        sum += taken[i];
      }
      out << sum << endl;
    }
	void solve(std::istream& in, std::ostream& out) {
	  int t;
	  in >> t;
	  while(t--){
	    f(in, out);
	  }
	}
};
 
 
int main() {
	CCaninePoetry solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
