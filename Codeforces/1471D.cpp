    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <fstream>
     
    #include <unordered_map>
    #include <vector>
    #include <map>
    #include <iostream>
    #include <fstream>
    #include <cmath>
    using namespace std;
    class DStrangeDefinition {
    public:
      vector<int> sieve(int n) {
        bool prime[n + 1];
        for(int i = 0; i < n + 1; i++){
          prime[i] = true;
        }
     
        for (int p = 2; p * p <= n; p++) {
          if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p) {
              prime[i] = false;
            }
          }
        }
     
        // Print all prime numbers
        vector<int> v;
        for (int p = 2; p <= n; p++) {
          if (prime[p]) {
            v.push_back(p);
          }
        }
        return v;
      }
      vector<int> primes;
      int distill(int x) {
        for(long long p: primes){
          if(p > sqrt(x)){
            break;
          }
          long long y = p * p;
          while(x % y == 0){
            x /= y;
          }
        }
        return x;
      }
      void f(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        int arr[n];
        unordered_map<int,int> oc;
        vector<int> val;
        for (int i = 0; i < n; i++) {
          in >> arr[i];
          arr[i] = distill(arr[i]);
          if(oc[arr[i]] == 0){
            val.push_back(arr[i]);
          }
          oc[arr[i]]++;
        }
        int ans0 = 0;
        int ans1 = 0;
        for(int i: val){
          if(oc[i] % 2 == 1 && i != 1){
            ans0 = max(ans0, oc[i]);
          }else{
            ans1 += oc[i];
            ans0 = max(ans0, oc[i]);
          }
        }
        int q;
        in >> q;
        while(q--){
          long long a;
          in >> a;
          if(a == 0){
            out << ans0 << endl;
            continue;
          }
          out << max(ans0, ans1) << endl;
        }
      }
      void solve(std::istream &in, std::ostream &out) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        primes = sieve(100000);
        int t;
        in >> t;
        while (t--) {
          f(in, out);
        }
      }
    };
     
    int main() {
    	DStrangeDefinition solver;
    	std::istream& in(std::cin);
    	std::ostream& out(std::cout);
    	solver.solve(in, out);
    	return 0;
    }
