/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <map>
#include <vector>
using namespace std;
class FFullTurn {
public:
    int GCD(int a, int b){
      if(a < b){
        swap(a,b);
      }
      if(b == 0){
        return a;
      }
      return GCD(a % b, b);
    }
    pair<int,int> change(int a, int b){
      if(a == 0 && b == 0){
        return {0,0};
      }
      if(a == 0){
        return {0,b/abs(b)};
      }
      if(b == 0){
        return {a/abs(a),b};
      }
      return {a/GCD(abs(a),abs(b)),b/GCD(abs(a),abs(b))};
    }
    map<pair<int,int>,int> myMap;
    void f(std::istream& in, std::ostream& out) {
      myMap.clear();
      int n;
      in >> n;
      for(int i = 0; i < n; i++){
        int a,b,c,d;
        in >> a >> b >> c >> d;
        pair<int,int> p = change(d - b, c - a);
        myMap[p]++;
      }
      long long counter = 0;
      for(pair<pair<int,int>,int> p: myMap){
        pair<int,int> p1 = p.first;
        long long x1 = myMap[{-p1.first,-p1.second}];
        long long x2 = p.second;
        //out << p.first.first << " " << p.first.second << endl;
        counter += x1 * x2;
      }
      out << counter/2 << endl;
    }
	void solve(std::istream& in, std::ostream& out) {
	  int t;
	  in >> t;
	  while(t--){
	    f(in, out);
	  }
	}
};


int main() {
	FFullTurn solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
