    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <fstream>
     
    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <fstream>
     
     
    #include <string>
    #include <map>
    #include <vector>
    #include <unordered_map>
    using namespace std;
    class DColoredBoots {
    public:
      void solve(std::istream& in, std::ostream& out) {
        int n;
        in >> n;
        string s1;
        string s2;
        in >> s1 >> s2;
        unordered_map<char,vector<int>> m1;
        unordered_map<char,vector<int>> m2;
        for(int i = 0; i < n; i++){
          m1[s1[i]].push_back(i);
          m2[s2[i]].push_back(i);
        }
        vector<pair<int,int>> ans;
        for(char c = 'a'; c <= 'z'; c++){
          if(!m1[c].empty() && !m2[c].empty()){
            int x = min(m1[c].size(),m2[c].size());
            for(int i = 0; i < x; i++){
              ans.push_back({m1[c][i], m2[c][i]});
              s1[m1[c][i]] = '0';
              s2[m2[c][i]] = '0';
            }
          }
        }
        m1.clear();
        m2.clear();
        for(int i = 0; i < n; i++){
          m1[s1[i]].push_back(i);
          m2[s2[i]].push_back(i);
        }
        for(int i: m1['?']){
          for(char c = 'a'; c <= 'z'; c++){
            if(!m2[c].empty()){
              //then let's alter it up
              ans.push_back({i, m2[c][m2[c].size() - 1]});
              s2[m2[c][m2[c].size() - 1]] = '0';
              m2[c].pop_back();
              s1[i] = '0';
              break;
            }
          }
        }
        m1.clear();
        m2.clear();
        for(int i = 0; i < n; i++){
          m1[s1[i]].push_back(i);
          m2[s2[i]].push_back(i);
        }
        for(int i: m2['?']){
          for(char c = 'a'; c <= 'z'; c++){
            if(!m1[c].empty()){
              //then let's alter it up
              ans.push_back({m1[c][m1[c].size() - 1], i});
              s1[m1[c][m1[c].size() - 1]] = '0';
              m1[c].pop_back();
              s2[i] = '0';
              break;
            }
          }
        }
        m1.clear();
        m2.clear();
        for(int i = 0; i < n; i++){
          m1[s1[i]].push_back(i);
          m2[s2[i]].push_back(i);
        }
        vector<int> v1 = m1['?'];
        vector<int> v2 = m2['?'];
        for(int i = 0; i < min(v1.size(), v2.size()); i++){
          ans.push_back({v1[i], v2[i]});
        }
        out << ans.size() << endl;
        for(pair<int,int> p: ans){
          out << p.first + 1 << " " << p.second + 1 << endl;
        }
      }
    };
     
    int main() {
    	DColoredBoots solver;
    	std::istream& in(std::cin);
    	std::ostream& out(std::cout);
    	solver.solve(in, out);
    	return 0;
    }
