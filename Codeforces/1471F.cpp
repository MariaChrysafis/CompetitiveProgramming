    /**
     * code generated by JHelper
     * More info: https://github.com/AlexeyDmitriev/JHelper
     * @author
     */
     
    #include <iostream>
    #include <fstream>
     
    #include <iostream>
    #include <vector>
    #include <queue>
    #include <map>
    #include <unordered_map>
    using namespace std;
    class FStrangeHousing {
    public:
      int n, m;
      unordered_map<int,vector<int>> adj;
      vector<int> bfs(std::istream &in, std::ostream &out){
        vector<int> color(n);
        for(int i = 0; i < n; i++){
          color[i] = -1;
        }
        //0 -> black
        //1 -> red
        queue<int> q;
        color[0] = 0;
        for(int i: adj[0]){
          color[i] = 1;
          q.push(i);
        }
        while(!q.empty()){
          int x = q.front();
          q.pop();
          for(int i: adj[x]){
            if(color[i] == -1){
              color[i] = 0;
              for(int j: adj[i]){
                if(color[j] == -1){
                  color[j] = 1;
                  q.push(j);
                }
              }
            }
          }
        }
        return color;
      }
      void f(std::istream &in, std::ostream &out) {
        adj.clear();
        in >> n >> m;
        for(int i = 0; i < m; i++){
          int u,v;
          in >> u >> v;
          u--;
          v--;
          adj[u].push_back(v);
          adj[v].push_back(u);
        }
        vector<int> v = bfs(in , out);
        vector<int> ans;
        for(int i = 0; i < v.size(); i++){
          if(v[i] == 0){
            ans.push_back(i + 1);
          }
          if(v[i] == -1){
            out << "NO" << endl;
            return;
          }
        }
        out << "YES" << endl;
        out << ans.size() << endl;
        for(int i: ans){
          out << i << " ";
        }
        out << endl;
      }
      void solve(std::istream &in, std::ostream &out) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int t;
        in >> t;
        while (t--) {
          f(in, out);
        }
      }
    };
     
     
    int main() {
    	FStrangeHousing solver;
    	std::istream& in(std::cin);
    	std::ostream& out(std::cout);
    	solver.solve(in, out);
    	return 0;
    }
