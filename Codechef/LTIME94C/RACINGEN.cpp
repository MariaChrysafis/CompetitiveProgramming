/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <algorithm>
#include <fstream>

#include <iostream>
#pragma GCC target("avx2")
#pragma GCC optimization("O3")
#pragma GCC optimization("unroll-loops")
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using namespace std;
class Racing {
public:

  bool f(std::istream &in, std::ostream &out) {
    long long X, R, M;
    in >> X >> R >> M;
    R *= 60;
    M *= 60;
    if(R > M){
      return false;
    }
    if(M < X){
      return true;
    }
    long long run = X + (M - X)/2;
    //out << run << endl;
    return (run >= R);
  }
  void solve(std::istream &in, std::ostream &out) {
    int t;
    in >> t;
    while(t--){
      bool b = f(in, out);
      if(b){
        out << "YES" << '\n';
      }else{
        out << "NO" << '\n';
      }
    }
  }
};


int main() {
	Racing solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
