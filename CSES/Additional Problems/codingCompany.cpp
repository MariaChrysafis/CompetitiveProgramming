/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;
class CodingCompany {
public:
  const int MOD = 1000000007;
  const int MAX = 5003;
  void solve(std::istream &in, std::ostream &out) {
    int n, x;
    in >> n >> x;
    int t[n];
    for(int i = 0; i < n; i++){
      in >> t[i];
    }
    sort(t, t + n);
    /*
     * dp[i][j][k]
     * using first i team members
     * a net penalty of j - MAX
     * k unfinished teams
     */
    vector<vector<long long>> prev;
    vector<vector<long long>> cur;
    prev.resize(2 * MAX);
    cur.resize(2 * MAX);
    for(int i = 0; i < 2 * MAX; i++){
      cur[i].resize(n + 1);
      prev[i].resize(n + 1);
    }
    //long long dp[n][2 * MAX][n + 1];
    //deal with the case when i = 0 (ie 1 team)
    for(int j = 0; j < 2 * MAX; j++){
      for(int k = 0; k <= n; k++){
        prev[j][k] = 0;
      }
    }
    prev[-t[0] + MAX][1] = 1;
    prev[MAX][0] = 1;
    for(int i = 1; i < n; i++){
      for(int j = 0; j < 2 * MAX; j++){
        for(int k = 0; k <= n; k++){
          cur[j][k] = 0;
          if(k - 1 >= 0 && j + t[i] < 2 * MAX){
            //we create a new team i which is unfinished
            cur[j][k] += prev[j + t[i]][k - 1];
          }
          //we create a new team i which is finished
          cur[j][k] += prev[j][k];
          if(j - t[i] >= 0 && k + 1 <= n) {
            //we merge i and finish that team
            cur[j][k] += prev[j - t[i]][k + 1] * (k + 1);
          }
          //we merge i and do not finish that team
          cur[j][k] += prev[j][k] * k;
          if(cur[j][k] > MOD){
            cur[j][k] %= MOD;
          }
        }
      }
      prev = cur;
    }
    long long sum = 0;
    for(int pen = 0; pen <= x; pen++){
      sum += prev[pen + MAX][0];
      if(sum > MOD){
        sum -= MOD;
      }
    }
    out << sum << endl;
  }
};


int main() {
  ios_base::sync_with_stdio(false);
        cin.tie(NULL);
	CodingCompany solver;
        std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
