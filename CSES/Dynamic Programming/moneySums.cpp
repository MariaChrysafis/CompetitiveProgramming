/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class MoneySums {
public:
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    in >> n;
    int arr[n];
    for(int i = 0; i < n; i++){
      in >> arr[i];
    }
    int MAX = 100001;
    bool DP[MAX];
    for(int i = 0; i < MAX; i++){
      DP[i] = false;
    }
    DP[0] = true;
    sort(arr,arr + n);
    //reverse(arr,arr + n);
    //2 2 4 5
    for(int j = 0; j < n; j++){
      for(int i = MAX; i >= 0; i--){
        if(i + arr[j] >= MAX) continue;
        if(DP[i + arr[j]]) continue;
        DP[i + arr[j]] = DP[i];
      }
    }
    vector<int> ans;
    for(int i = 1; i < MAX; i++){
      if(DP[i]){
        ans.push_back(i);
      }
    }
    out << ans.size() << endl;
    for(int i: ans){
      out << i << " ";
    }
  }
};


int main() {
	MoneySums solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
