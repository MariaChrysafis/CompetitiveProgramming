/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem2NoTimeToPaint {
public:
  vector<int> pref(string s){
    vector<int> v;
    v.resize(s.length());
    map<char,bool> used;
    int counter = 0;
    for(int i = 0; i < s.length(); i++){
      if(!used[s[i]]){
        used[s[i]] = true;
        counter++;
      }
      for(char c = s[i]; c <= 'Z'; c++){
        if(c == s[i]) continue;
        if(used[c]){
          used[c] = false;
        }
      }
      v[i] = counter;
    }
    return v;
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int N,Q;
    in >> N >> Q;
    string s;
    in >> s;
    vector<int> Pref = pref(s);
    reverse(s.begin(),s.end());
    vector<int> Suf = pref(s);
    reverse(Suf.begin(),Suf.end());
    while(Q--){
      int l,r;
      in >> l >> r;
      l--;
      r--;
      if(l == 0 && r == s.length()){
        out << 0 << endl;
      }else if(l == 0){
        out << Suf[r + 1] << endl;
      }else if(r == s.length()){
        out << Pref[l - 1] << endl;
      }else{
        out << Pref[l - 1] + Suf[r + 1] << endl;
      }
    }
  }
};


int main() {
	Problem2NoTimeToPaint solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
