/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>


#include <algorithm>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem1DanceMooves {
public:
  vector<vector<int>> adj;
  vector<bool> hasVisited;
  int N, K;
  vector<int> vis;
  void dfs(int src){
    hasVisited[src] = true;
    vis.push_back(src);
    for(int j: adj[src]){
      if(!hasVisited[j]){
        dfs(j);
      }
    }
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    in >> N >> K;
    hasVisited.resize(N);
    adj.resize(N);
    //first perform the swaps
    vector<int> arr(N);
    vector<set<int>> myMap(N);
    for(int i = 0; i < N; i++){
      arr[i] = i;
      myMap[i].insert(i);
    }
    vector<pair<int,int>> swaps(K);
    for(int i = 0; i < K; i++){
      int a,b;
      in >> a >> b;
      a--;
      b--;
      myMap[arr[a]].insert(b);
      myMap[arr[b]].insert(a);
      swap(arr[a], arr[b]);
    }
    for(int i = 0; i < N; i++){
      adj[i].push_back(arr[i]);
    }
    vector<vector<int>> cc;
    for(int i = 0; i < N; i++){
      if(!hasVisited[i]){
        dfs(i);
        cc.push_back(vis);
        vis.clear();
      }
    }
    vector<int> ans;
    int pr[N];
    for(int i = 0; i < cc.size(); i++){
      set<int> s;
      for(int j: cc[i]){
        s.insert(myMap[j].begin(),myMap[j].end());
      }
      for(int j: cc[i]){
        pr[j] = s.size();
      }
    }
    for(int j: pr){
      out << j << endl;
    }
  }
};

int main() {
	Problem1DanceMooves solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
