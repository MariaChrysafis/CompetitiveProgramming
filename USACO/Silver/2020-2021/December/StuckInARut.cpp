/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<vector>
#include <map>
#include <algorithm>
using namespace std;
class Problem3StuckInARut {
public:
    const int INF = 1000000000;
    int dist(pair<int,int> p1, pair<int,int> p2){
      return p2.first - p1.first + p2.second - p1.second;
    }
	void solve(std::istream& in, std::ostream& out) {
	  vector<pair<int,int>> east;
	  vector<pair<int,int>> north;
	  map<pair<int,int>,int> ind;
	  int n;
	  in >> n;
	  for(int i = 0; i < n; i++){
	    char c;
	    int x,y;
	    in >> c >> x >> y;
	    ind[{x,y}] = i;
	    if(c == 'E'){
	      east.push_back({y,x});
	    }else{
	      north.push_back({x,y});
	    }
	  }
	  sort(north.begin(),north.end());
	  sort(east.begin(),east.end());
	  for(int i = 0; i < east.size(); i++){
	    swap(east[i].first,east[i].second);
	  }
	  bool blocked[n];
	  for(int i = 0; i < n; i++){
	    blocked[i] = 0;
	  }
	  int ans[n];
	  for(int i = 0; i < n; i++){
	    ans[i] = 0;
	  }
	  for(pair<int,int> pn: north){
	    for(pair<int,int> pe: east){
	      if(blocked[ind[pn]] || blocked[ind[pe]]){
	        continue;
	      }
	      if(pe.second < pn.second || pe.first > pn.first){
	        continue;
	      }
	      if(pe.second - pn.second < pn.first - pe.first){
	        //north beats east
	        //cout << ind[pn] << " beats " << ind[pe] << endl;
	        blocked[ind[pe]] = 1;
	        ans[ind[pn]] += 1 + ans[ind[pe]];
	      }
	      if(pe.second - pn.second > pn.first - pe.first){
	        //east beats north
            //cout << ind[pe] << " beats " << ind[pn] << endl;
	        blocked[ind[pn]] = 1;
	        ans[ind[pe]] += 1 + ans[ind[pn]];
	      }
	    }
	  }
	  for(int i = 0; i < n; i++){
	    out << ans[i] << endl;
	  }
	}
};


int main() {
	Problem3StuckInARut solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
