/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>
#include <cmath>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;
class Problem1HighCardLowCardGold {
public:
  int low(vector<int> v1, vector<int> v2){
    sort(v1.begin(),v1.end());
    sort(v2.begin(),v2.end());
    int ind1, ind2;
    ind1 = 0, ind2 = 0;
    int n = v1.size();
    int cntr = 0;
    while(ind1 < n && ind2 < n){
      if(v1[ind1] < v2[ind2]){
        ind1++;
        ind2++;
        cntr++;
      }else{
        ind2++;
      }
    }
    return cntr;
  }
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    int o[2 * n];
    for(int i = 0; i < 2 * n; i++){
      o[i] = 0;
    }
    vector<int> bes(n);
    for(int i = 0; i < n; i++){
      in >> bes[i];
      bes[i]--;
      o[bes[i]]++;
    }
    vector<int> els;
    for(int i = 0; i < 2 * n; i++){
      if(o[i] == 0){
        els.push_back(i);
      }
    }
    vector<int> bessie[2];
    vector<int> elsie[2];
    bessie[0].resize(n / 2),bessie[1].resize(n / 2);
    elsie[0].resize(n / 2), elsie[1].resize(n / 2);
    for(int i = 0; i < n/2; i++){
      bessie[0][i] = bes[i];
    }
    for(int i = n / 2; i < n; i++){
      bessie[1][i - n / 2] = bes[i];
    }
    sort(els.begin(),els.end());
    reverse(els.begin(),els.end());
    for(int i = 0; i < n/2; i++){
      elsie[0][i] = els[i];
    }
    for(int i = n / 2; i < n; i++){
      elsie[1][i - n / 2] = els[i];
    }
    out << low(bessie[0],elsie[0]) + low(elsie[1],bessie[1]);
  }
};


int main() {
  ios_base::sync_with_stdio(false);
        cin.tie(NULL);
	Problem1HighCardLowCardGold solver;
        std::ifstream in("cardgame.in");
	std::ofstream out("cardgame.out");
	solver.solve(in, out);
	return 0;
}
