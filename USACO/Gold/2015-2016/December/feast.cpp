/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
using namespace std;
class Problem2FruitFeast {
public:
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int T,A,B;
    in >> T >> A >> B;
    bool pos[T + 1][1];
    pos[0][0] = true;
    for(int i = 1; i <= T; i++){
      pos[i][0] = false;
    }
    for(int i = 0; i <= T; i++){
      if(i - A >= 0){
        pos[i][0] = pos[i - A][0] || pos[i][0];
      }
      if(i - B >= 0){
        pos[i][0] = pos[i][0] || pos[i - B][0];
      }
    }
    int pref[T];
    pref[0] = 0;
    for(int i = 1; i <= T; i++){
      pref[i] = max(pref[i - 1], pos[i][0] * i);
      //out << pref[i] << endl;
    }
    int myMax = 0;
    for(int i = 0; i <= T; i++){
      if(!pos[i][0]){
        continue;
      }
      int cur = i/2;
      myMax = max(cur + pref[T - cur],myMax);
    }
    out << myMax << endl;
  }
};


int main() {
	Problem2FruitFeast solver;
	std::ifstream in("feast.in");
	std::ofstream out("feast.out");
	solver.solve(in, out);
	return 0;
}
