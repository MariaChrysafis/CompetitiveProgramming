/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;
class Problem1SplittingTheField {
public:
  struct coord{
    long long x,y;
    bool operator <(const coord & playerObj) const{
      return x < playerObj.x;
    }
  };
  bool compx(coord a, coord b){
    return a.x < b.x;
  }
  long long static max(long long a, long long b){
    if(a > b){
      return a;
    }
    return b;
  }
  long long static min(long long a, long long b){
    if(a < b){
      return a;
    }
    return b;
  }
  static const long long INF = LLONG_MAX;
  struct plane{
    vector<coord> v;
    int n;
    //sort them by the x-coordinates
    long long f(){
      sort(v.begin(),v.end());
      long long maxStart[v.size()];
      long long minStart[v.size()];
      long long maxEnd[v.size()];
      long long minEnd[v.size()];
      maxStart[0] = minStart[0] = v[0].y;
      for(int i = 1; i < v.size(); i++){
        maxStart[i] = max(maxStart[i - 1],v[i].y);
        minStart[i] = min(minStart[i - 1],v[i].y);
      }
      maxEnd[n - 1] = minEnd[n - 1] = v[n - 1].y;
      for(int i = n - 2; i >= 0; i--){
        maxEnd[i] = max(maxEnd[i + 1],v[i].y);
        minEnd[i] = min(minEnd[i + 1],v[i].y);
      }
      long long myMin = INF;
      for(int i = 0; i < v.size() - 1; i++){
        long long ar1 = (maxStart[i] - minStart[i]);
        long long ar2 = (maxEnd[i + 1] - minEnd[i + 1]);
        ar1 *= v[i].x - v[0].x;
        ar2 *= v[n - 1].x - v[i + 1].x;
        myMin = min(ar1 + ar2, myMin);
      }
      return myMin;
    }
  };
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    vector<coord> v(n);
    long long maxX = 0, maxY = 0;
    long long minX = INF, minY = INF;
    for(int i = 0; i < n; i++){
      in >> v[i].x >> v[i].y;
      maxX = max(maxX, v[i].x);
      minX = min(minX, v[i].x);
      maxY = max(maxY, v[i].y);
      minY = min(minY, v[i].y);
    }
    long long a1 = (maxX - minX) * (maxY - minY);
    plane p1;
    p1.v = v;
    p1.n = v.size();
    long long ans = p1.f();
    plane p2;
    for(int i = 0; i < v.size(); i++){
      swap(v[i].x,v[i].y);
    }
    p2.v = v;
    p2.n = v.size();
    ans = min(p2.f(),ans);
    out << a1 - ans << endl;
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	Problem1SplittingTheField solver;
	std::ifstream in("split.in");
	std::ofstream out("split.out");
	solver.solve(in, out);
	return 0;
}
