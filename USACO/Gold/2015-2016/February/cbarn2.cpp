/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem2CircularBarnRevisited {
public:
  vector<long long> arr;
  int N,K;
  void rotate(){
    //rotate the array
    int x = arr[arr.size() - 1];
    arr.pop_back();
    reverse(arr.begin(),arr.end());
    arr.push_back(x);
    reverse(arr.begin(),arr.end());
  }
  const long long INF = 1000000000000;
  long long ans = INF;
  void dp(std::istream& in, std::ostream& out){
    long long DP[K][N];
    long long cost[N][N];
    for(int i = 0; i < N; i++){
      for(int j = 0; j < N; j++){
        cost[i][j] = INF;
      }
    }
    for(int i = 0; i < N; i++){
      for(int j = i; j < N; j++){
        if(i == j){
          cost[i][j] = 0;
          continue;
        }
        cost[i][j] = cost[i][j - 1] + arr[j] * (j - i);
      }
    }
    for(int i = 0; i < N; i++){
      DP[0][i] = cost[0][i];
    }
    for(int i = 1; i < K; i++){
      for(int j = 0; j < N; j++){
        DP[i][j] = INF;
        for(int k = 0; k < j; k++){
          DP[i][j] = min(DP[i][j],DP[i - 1][k] + cost[k + 1][j]);
        }
      }
    }
    ans = min(DP[K - 1][N - 1], ans);
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    in >> N >> K;
    for(int i = 0; i < N; i++){
      long long a;
      in >> a;
      arr.push_back(a);
    }
    for(int i = 0; i < N; i++){
      rotate();
      dp(in, out);
    }
    out << ans << endl;
  }
};


int main() {
	Problem2CircularBarnRevisited solver;
	std::ifstream in("cbarn2.in");
	std::ofstream out("cbarn2.out");
	solver.solve(in, out);
	return 0;
}
