/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
class Problem2RadioContact {
public:
  struct coord{
    int x;
    int y;
  };
  int dist(coord c1, coord c2){
    int x = c1.x - c2.x;
    int y = c1.y - c2.y;
    return x * x + y * y;
  }
  map<char,coord> dir;
  void print(coord c,std::istream &in, std::ostream &out){
    out << c.x << " " << c.y << endl;
  }
  vector<coord> pos(string s, coord c){
    vector<coord> v;
    v.push_back(c);
    coord cur = c;
    for(int i = 0; i < s.length(); i++){
      cur = {cur.x + dir[s[i]].x,cur.y + dir[s[i]].y};
      v.push_back(cur);
    }
    return v;
  }
  int min(int a, int b, int c){
    vector<int> v = {a,b,c};
    sort(v.begin(),v.end());
    return v[0];
  }
  int N,M;
  vector<vector<int>> DP;
  vector<coord> posfj;
  vector<coord> posbe;
  int memoize(int fj, int be){
    if(DP[fj][be] != -1){
      return DP[fj][be];
    }
    if(fj == N && be == M){
      DP[fj][be] = 0;
      return DP[fj][be];
    }
    if(fj == N){
      DP[fj][be] = memoize(fj,be + 1) + dist(posfj[fj],posbe[be + 1]);
      return DP[fj][be];
    }
    if(be == M){
      DP[fj][be] = memoize(fj + 1,be) + dist(posfj[fj + 1],posbe[be]);
      return DP[fj][be];
    }
    int pos1 = memoize(fj + 1,be) + dist(posfj[fj + 1],posbe[be]);
    int pos2 = memoize(fj,be + 1) + dist(posfj[fj],posbe[be + 1]);
    int pos3 = memoize(fj + 1, be + 1) + dist(posfj[fj + 1],posbe[be + 1]);
    DP[fj][be] = min(pos1,pos2,pos3);
    return DP[fj][be];
  }
  void solve(std::istream &in, std::ostream &out) {
    dir['N'] = {0,1};
    dir['S'] = {0,-1};
    dir['E'] = {1,0};
    dir['W'] = {-1,0};
    in >> N >> M;
    coord fj;
    in >> fj.x >> fj.y;
    coord be;
    in >> be.x >> be.y;
    string s1;
    string s2;
    in >> s1 >> s2;
    posfj = pos(s1,fj);
    posbe = pos(s2,be);
    DP.resize(N + 1);
    for(int i = 0; i <= N; i++){
      DP[i].resize(M + 1);
      for(int j = 0; j <= M; j++){
        DP[i][j] = -1;
      }
    }
    int a = memoize(0,0);
    out << a << endl;
  }
};
int main() {
  Problem2RadioContact solver;
  std::ifstream in("radio.in");
      std::ofstream out("radio.out");
      solver.solve(in, out);
      return 0;
}
