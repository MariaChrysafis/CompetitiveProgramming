/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>
#define ll long long
using namespace std;
class Problem1AngryCows {
public:
  const int INF = 2000000000;
  vector<vector<int>> DP;
  vector<int> arr;
  bool valid(int R){
    int n = DP[0].size();
    int prev = 0;
    int myMax = INF;
    for(int i = 0; i < n; i++){
      for(int j = prev; j < n; j++){
        int dist = abs(arr[i] - arr[j]);
        if(dist <= R){
          prev = j;
        }else{
          break;
        }
      }
      //take everything from i to prev
      int pos1 = max(DP[0][i], DP[1][prev]);
      myMax = min(myMax,pos1 + 1);
    }
    return (2 * myMax <= R);
  }
  int binSearch(int l, int r){
    int m = (l + r)/2;
    if(valid(m) && (m == 0 || !valid(m - 1))){
      return m;
    }
    if(valid(m)){
      return binSearch(l,m - 1);
    }
    return binSearch(m + 1,r);
  }
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    arr.resize(n);
    for(int i = 0; i < n; i++){
      in >> arr[i];
    }
    sort(arr.begin(), arr.end());
    DP.resize(2);
    DP[0].resize(n);
    DP[1].resize(n);
    for(int i = 0; i < 2; i++){
      DP[i][0] = -2;
      int prev = 0;
      for(int j = 1; j < n; j++){
        DP[i][j] = INF;
        int p = prev;
        for(int k = p; k < j; k++){
          int pos1 = abs(arr[j] - arr[k]);
          int pos2 = DP[i][k] + 1;
          if(pos1 > DP[i][j] || pos2 > DP[i][j]){
            break;
          }
          DP[i][j] = max(pos1,pos2);
          prev = k;
        }
      }
      reverse(arr.begin(),arr.end());
    }
    reverse(DP[1].begin(),DP[1].end());
    int myMax = INF;
    for(int i = 0; i < n - 1; i++){
      int dist = abs(arr[i] - arr[i + 1]);
      int pos = max(DP[0][i],DP[1][i + 1]);
      myMax = min(myMax,max(dist,2 * (pos + 1)));
    }
    for(int i = 0; i < n; i++){
      int mx = max(DP[0][i], DP[1][i]) * 2;
      myMax = min(mx,myMax);
    }
    myMax = binSearch(0,INF);
    out << myMax/2;
    if(myMax % 2 == 0){
      out << ".0";
    }else{
      out << ".5";
    }
    out << endl;
  }
};


int main() {
  Problem1AngryCows solver;
  std::ifstream in("angry.in");
      std::ofstream out("angry.out");
      solver.solve(in, out);
      return 0;
}
