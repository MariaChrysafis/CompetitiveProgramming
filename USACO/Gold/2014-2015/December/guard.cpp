/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
using namespace std;
struct cow {
  long long height;
  long long weight;
  long long strength;
};
class Problem1GuardMark {
public:
  int N;
  int H;
  vector<long long> dp;
  vector<cow> v;
  vector<bool> valid;
  long long memoize(int x) {
    if (!valid[x]) {
      return dp[x];
    }
    for (int i = 0; i < N; i++) {
      if (x & (1 << i)) {
        long long base = memoize(x ^ (1 << i));
        base -= v[i].weight;
        if (base < 0) {
          continue;
        }
        if(base > v[i].strength){
          base = v[i].strength;
        }
        if(dp[x] < base){
          dp[x] = base;
        }
      }
    }
    valid[x] = false;
    return dp[x];
  }
  void solve(std::istream &in, std::ostream &out) {
    in >> N >> H;
    dp.resize((1 << N) + 1);
    valid.resize((1 << N) + 1);
    for (int i = 0; i < (1 << N); i++) {
      dp[i] = -1;
      valid[i] = true;
    }
    v.resize(N);
    for (int i = 0; i < N; i++) {
      in >> v[i].height >> v[i].weight >> v[i].strength;
    }
    int cntr = 0;
    for (int i = 1; i < 1 << N; i *= 2) {
      dp[i] = v[cntr].strength;
      cntr++;
    }
    memoize((1 << N) - 1);
    int best = -1;
    int he[(1 << N) + 1];
    for (int i = 0; i < (1 << N); i++) {
      he[i] = 0;
    }
    he[0] = 0;
    for (int i = 1; i < (1 << N); i++) {
      for (int j = 0; j < N; j++) {
        if (i & (1 << j)) {
          he[i] = he[i ^ (1 << j)] + v[j].height;
          break;
        }
      }
      //continue;
      int totHeight = he[i];
      if (totHeight >= H) {
        if (dp[i] != -1 && dp[i] > best) {
          best = dp[i];
        }
      }
    }
    if (best == -1) {
      out << "Mark is too tall" << endl;
      return;
    }
    out << best << endl;
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	Problem1GuardMark solver;
	//std::istream& in(std::cin);
	//std::ostream& out(std::cout);
  freopen("guard.in", "r", stdin);
  // the following line creates/overwrites the output file
  freopen("guard.out", "w", stdout);
	//solver.solve(in, out);
  solver.solve(cin, cout);
	return 0;
}
