/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem3LasersAndMirrors {
public:
  int N;
  const static int MAX = 100006;
  const static int INF = 10000000;
  int dp1[MAX];
  int dp2[MAX];
  struct coord{
    int x,y,ind;
  };
  map<int,vector<coord>> mx;
  map<int,vector<coord>> my;
  void pos1(int x, int y, int i, int moves){
    if(dp1[i] != INF){
      return;
    }
    dp1[i] = moves;
    if(i == N + 1){
      return;
    }
    if(moves % 2 == 1){
      for(coord c: mx[x]){
        pos1(c.x,c.y, c.ind, moves + 1);
      }
    }else{
      for(coord c: my[y]){
        pos1(c.x, c.y, c.ind, moves + 1);
      }
    }
  }
  void pos2(int x, int y, int i, int moves){
    if(dp2[i] != INF){
      return;
    }
    dp2[i] = moves;
    if(i == N + 1){
      return;
    }
    if(moves % 2 == 0){
      for(coord c: mx[x]){
        pos2(c.x,c.y, c.ind, moves + 1);
      }
    }else{
      for(coord c: my[y]){
        pos2(c.x, c.y, c.ind, moves + 1);
      }
    }
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int xl, yl, xb, yb;
    in >> N >> xl >> yl >> xb >> yb;
    mx[xl].push_back({xl,yl,N});
    my[yl].push_back({xl,yl,N});
    mx[xb].push_back({xb,yb,N + 1});
    my[yb].push_back({xb,yb,N + 1});
    for(int i = 0; i < N; i++){
      int a,b;
      in >> a >> b;
      coord c = {a,b,i};
      mx[a].push_back(c);
      my[b].push_back(c);
    }
    for(int i = 0; i <= N + 1; i++){
      dp1[i] = dp2[i] = INF;
    }
    pos1(xl,yl,N,0);
    pos2(xl,yl,N,0);
    int ans = min(dp1[N + 1],dp2[N + 1]);
    if(ans == INF){
      out << -1 << endl;
      return;
    }
    out << ans - 1 << endl;
  }
};


int main() {
	Problem3LasersAndMirrors solver;
	std::ifstream in("lasers.in");
	std::ofstream out("lasers.out");
	solver.solve(in, out);
	return 0;
}
