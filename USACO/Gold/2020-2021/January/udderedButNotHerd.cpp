/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <cmath>
#include <iostream>
#include <map>
using namespace std;
const int MAX = 1 << 21;
int dp[MAX + 1];
int adj[26][26];
string s;
int to_int(char c) { return (c - 'a'); }
class Problem1UdderedButNotHerd {
public:
  int memoize(int x) {
    if (dp[x] != MAX) {
      return dp[x];
    }
    for (int i = 0; i < 26; i++) {
      if (x & (1 << i)) {
        int base = memoize(x ^ (1 << i));
        for (int j = 0; j < 26; j++) {
          if (x & (1 << j)) {
            base += adj[j][i];
          }
        }
        dp[x] = min(base, dp[x]);
      }
    }
    return dp[x];
  }
  void solve(std::istream &in, std::ostream &out) {
    in >> s;
    map<char,char> myMap;
    for(char c = 'a'; c <= 'z'; c++){
      myMap[c] = '?';
    }
    char cur = 'a';
    for(char c: s){
      if(myMap[c] == '?'){
        myMap[c] = cur;
        cur++;
      }
    }
    for(int i = 0; i < s.length(); i++){
      s[i] = myMap[s[i]];
    }
    for (int i = 0; i < MAX; i++) {
      dp[i] = MAX;
    }
    dp[0] = 1;
    for (int i = 0; i < 26; i++) {
      for (int j = 0; j < 26; j++) {
        adj[i][j] = 0;
      }
    }
    for (int i = 0; i < s.length() - 1; i++) {
      adj[to_int(s[i])][to_int(s[i + 1])]++;
    }
    int myMax = 0;
    for (int i = 0; i < s.length(); i++) {
      myMax = max(to_int(s[i]), myMax);
    }
    int x = memoize( (1 << (myMax + 1)) - 1);
    out << x << endl;
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	Problem1UdderedButNotHerd solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
