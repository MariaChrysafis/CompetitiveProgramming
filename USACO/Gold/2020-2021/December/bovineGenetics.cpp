/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
using namespace std;
class Problem2BovineGenetics {
public:
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    string s;
    in >> s;
    map<char,int> myMap;
    string str = "AGCT";
    for(int i = 0; i < str.length(); i++){
      myMap[str[i]] = i;
    }
    long long MOD = pow(10,9) + 7;
    long long DP[s.length()][4][4][4];
    for(int i = 0; i < s.length(); i++){
      for(int j = 0; j < 4; j++){
        for(int k = 0; k < 4; k++){
          for(int l = 0; l < 4; l++){
            DP[i][j][k][l] = 0;
          }
        }
      }
    }
    if(s[0] == '?'){
      for(int i = 0; i < 4; i++){
        for(int j = 0; j < 4; j++){
          DP[0][i][j][j] = 1;
        }
      }
    }else{
      for(int i = 0; i < 4; i++){
        int x = myMap[s[0]];
        DP[0][i][x][x] = 1;
      }
    }
    for(int i = 1; i < s.length(); i++){
      for(int x3 = 0; x3 < 4; x3++){
        if(s[i] == '?' || myMap[s[i]] == x3){
          for(int a = 0; a < 4; a++){
            for(int b = 0; b < 4; b++){
              for(int c = 0; c < 4; c++){
                if(x3 != c){
                  DP[i][a][b][x3] += DP[i - 1][a][b][c];
                  if(DP[i][a][b][x3] > MOD){
                    DP[i][a][b][x3] -= MOD;
                  }
                }
                if(a == c){
                  DP[i][b][x3][x3] += DP[i - 1][a][b][c];
                  if(DP[i][b][x3][x3] > MOD){
                    DP[i][b][x3][x3] -= MOD;
                  }
                }
              }
            }
          }
        }
      }
    }
    long long ans = 0;
    for(int i = 0; i < 4; i++){
      for(int j = 0; j < 4; j++){
        ans += DP[s.length() - 1][j][i][j];
      }
    }
    ans %= MOD;
    out << ans << endl;
  }
};

int main() {
	Problem2BovineGenetics solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
