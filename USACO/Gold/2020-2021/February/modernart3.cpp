/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <set>
const int MAX = 301;
const long long INF = 100000000;
using namespace std;
class Problem2ModernArt3 {
public:
  int dp[MAX + 1][MAX + 1][MAX + 1];
  int arr[MAX + 1];
  bool same[MAX + 1][MAX + 1];
  int n;
  int memoize(int x, int y, int base){
    //cout << x << " " << y << " " << base << endl;
    if(x < 0 || y < 0 || x >= n || y >= n || x > y){
      return INF;
    }
    if(dp[x][y][base] != -1){
      return dp[x][y][base];
    }
    bool fine = true;
    for(int i = x; i <= y; i++){
      if(arr[i] != arr[x]){
        fine = false;
        break;
      }
    }
    if(fine){
      return (arr[x] != base);
    }
    int myMin = INF;
    if(arr[x] == arr[y]){
      int new_x = x;
      for(int i = 1; i < n; i++){
        if(x + i >= n) continue;
        if(arr[x] != arr[x + i]){
          new_x = x + i;
          break;
        }
      }
      int new_y = y;
      for(int i = 1; i < n; i++){
        if(y - i < 0) continue;
        if(arr[y] != arr[y - i]){
          new_y = y - i;
          break;
        }
      }
      myMin = memoize(new_x, new_y, arr[x]) + (base != arr[x]);
    }
    for(int i = x; i < y; i++){
      int pos1 = memoize(x, i, base) + memoize(i + 1, y, base);
      myMin = min(pos1, myMin);
    }
    dp[x][y][base] = myMin;
    return myMin;
  }
  void solve(std::istream &in, std::ostream &out) {
    in >> n;
    for(int i = 0; i < n; i++){
      in >> arr[i];
      for(int j = 0; j < n; j++){
        for(int b = 0; b <= n + 1; b++) {
          dp[i][j][b] = -1;
        }
      }
    }
    int myMin = INF;
    for(int b = 1; b <= n; b++) {
      int x = memoize(0, n - 1, n + 1);
      myMin = min(x, myMin);
    }
    out << myMin << endl;
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	Problem2ModernArt3 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
