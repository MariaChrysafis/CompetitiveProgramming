/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */


#include <cmath>
#include <fstream>


#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
class Problem2SleepyCowSorting {
public:
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    int arr[n];
    for(int i = 0; i < n; i++){
      in >> arr[i];
    }
    int x = n - 1;
    for(int i = n - 1; i >= 1; i--){
      if(arr[i] > arr[i - 1]){
        x = i - 1;
      }else{
        break;
      }
    }
    ordered_set s;
    for(int i = x; i < n; i++){
      s.insert(arr[i]);
    }
    out << x << endl;
    int ind = x;
    for(int i = 0; i < x; i++){
      int l = s.order_of_key(arr[i]);
      s.insert(arr[i]);
      ind--;
      out << l + ind;
      if(i != x - 1){
        out << " ";
      }
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
        cin.tie(NULL);
	Problem2SleepyCowSorting solver;
        std::ifstream in("sleepy.in");
	std::ofstream out("sleepy.out");
	solver.solve(in, out);
	return 0;
}
