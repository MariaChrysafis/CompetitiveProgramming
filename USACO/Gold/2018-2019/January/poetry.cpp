/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;
long long binpow(long long a, long long b, const long long MOD) {
  long long res = 1;
  while (b > 0) {
    if (b & 1){
      res = res * a;
      res %= MOD;
    }
    a = a * a;
    a %= MOD;
    b >>= 1;
  }
  return res;
}
class Problem1CowPoetry {
public:
  const int MOD = pow(10, 9) + 7;
  const long long BMOD = pow(10, 17) + 7;
  struct word {
    int length;
    int rhyme;
  };
  const static int maxK = 5001;
  long long DP[maxK];
  vector<word> arr;
  unordered_map<char,int> myMap;
  void fill() {
    for (int i = 0; i < maxK; i++) {
      DP[i] = 0;
    }
    DP[0] = 1;
    for (int i = 0; i < maxK; i++) {
      for (int j = 0; j < arr.size(); j++) {
        if (i - arr[j].length < 0) {
          continue;
        }
        DP[i] += DP[i - arr[j].length];
        if(DP[i] > BMOD) {
          DP[i] -= BMOD;
        }
      }
      DP[i] %= MOD;
    }
  }
  vector<long long> v;
  long long pwr(long long r){
    long long sum = 0;
    for(long long i: v){
      sum += binpow(i,r,MOD);
      if(sum > BMOD){
        sum -= BMOD;
      }
    }
    return sum % MOD;
  }
  void solve(std::istream &in, std::ostream &out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int N, M, K;
    in >> N >> M >> K;
    arr.resize(N);
    for (int i = 0; i < N; i++) {
      int si, ci;
      in >> si >> ci;
      arr[i] = {si, ci};
    }
    fill();
    for(int i = 0; i < M; i++){
      char c;
      in >> c;
      myMap[c]++;
    }
    vector<word> m[maxK];
    for(word w: arr){
      m[w.rhyme].push_back(w);
    }
    for(int i = 1; i <= N; i++){
      long long ans = 0;
      for(word w: m[i]){
        ans += DP[K - w.length];
        if(ans > BMOD){
          ans -= BMOD;
        }
      }
      v.push_back(ans % MOD);
    }
    long long ans = 1;
    for(char c = 'A'; c <= 'Z'; c++){
      if(myMap[c] == 0){
        continue;
      }
      ans *= pwr(myMap[c]);
      ans %= MOD;
    }
    out << ans << endl;
  }
};


int main() {
	Problem1CowPoetry solver;
	std::ifstream in("poetry.in");
	std::ofstream out("poetry.out");
	solver.solve(in, out);
	return 0;
}
