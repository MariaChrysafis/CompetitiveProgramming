/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem1Snakes {
public:
  vector<int> pref;
  vector<int> arr;
  vector<vector<int>> rm;
  int sumOverInterval(int l, int r){
    if(l == 0){
      return pref[r];
    }
    return pref[r] - pref[l - 1];
  }
  const static int MAX = 405;
  const static int INF = 1000000000;
  int dp[MAX][MAX];
  int N,K;
  //dp[i][j] -> minimum number of moves up until the ith basket and j moves
  int fill(int n, int k){
    if(n < 0){
      return 0;
    }
    if(k <= 0){
      return INF;
    }
    if(dp[n][k] != INF){
      return dp[n][k];
    }
    if(k == 1){
      dp[n][k] = rm[0][n] * (n + 1) - sumOverInterval(0,n);
      return dp[n][k];
    }
    for(int i = 0; i <= n; i++){
      int cost = -sumOverInterval(i,n) + rm[i][n] * (n - i + 1);
      dp[n][k] = min(cost + fill(i - 1,k - 1),dp[n][k]);
    }
    return dp[n][k];
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    in >> N >> K;
    K++;
    pref.resize(N);
    arr.resize(N);
    for(int i = 0; i < N; i++){
      in >> arr[i];
    }
    pref[0] = arr[0];
    for(int i = 1; i < N; i++){
      pref[i] = arr[i] + pref[i - 1];
    }
    for(int i = 0; i < N; i++){
      for(int j = 0; j <= K; j++){
        dp[i][j] = INF;
      }
    }
    rm.resize(N);
    for(int i = 0; i < N; i++){
      rm[i].resize(N);
      for(int j = i; j < N; j++){
        if(i == j){
          rm[i][j] = arr[i];
        }else{
          rm[i][j] = max(rm[i][j - 1], arr[j]);
        }
      }
    }
    fill(N - 1, K);
    out << dp[N - 1][K] << endl;
  }
};


int main() {
	Problem1Snakes solver;
	std::ifstream in("snakes.in");
	std::ofstream out("snakes.out");
	solver.solve(in, out);
	return 0;
}
