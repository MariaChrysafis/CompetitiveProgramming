/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
using namespace std;
class Problem1MilkPumping {
public:
    struct Pair{
      int neighbor;
      int weight;
      bool operator<(const Pair &b) const{
        return this->weight > b.weight;
      }
    };
    struct Junction{
      int u;
      int v;
      int cost;
      int flow;
      bool operator<(const Junction &b) const{
        return this->flow > b.flow;
      }
    };
    map<int, vector<struct Pair> > adj;
    const int INF = 1000000;
    int dijk(int MAX, int src, int end){
      priority_queue<struct Pair> pq;
      bool mark[MAX];
      int dist[MAX];
      for(int i = 0; i < MAX; i++){
        mark[i] = false;
        dist[i] = INF;
      }
      dist[src] = 0;
      pq.push({src,0});
      while(!pq.empty()){
        int x = pq.top().neighbor;
        pq.pop();
        if(mark[x]){
          continue;
        }
        mark[x] = true;
        for(Pair p: adj[x]){
          int a = p.neighbor;
          int b = p.weight;
          if(dist[a] > dist[x] + b){
            dist[a] = dist[x] + b;
            pq.push({a,dist[a]});
          }
        }
      }
      return dist[end];
    }
    void add_edge(int u, int v, int weight){
      adj[u].push_back({v,weight});
      adj[v].push_back({u,weight});
    }
    float val(int x, int y){
      float x1 = x;
      float y1 = y;
      return x1/y1;
    }
	void solve(std::istream& in, std::ostream& out) {
	  int n, m;
	  in >> n >> m;
	  vector<struct Junction> inp;
	  for(int i = 0; i < m; i++){
	    int u,v,c,f;
	    in >> u >> v >> c >> f;
	    u--;
	    v--;
	    inp.push_back({u,v,c,f});
	  }
	  sort(inp.begin(),inp.end());
	  float ans = 0;
	  for(int i = 0; i < inp.size(); i++){
	    add_edge(inp[i].u, inp[i].v, inp[i].cost);
	    int x = dijk(1000,0, n - 1);
	    if(x == INF){
	      continue;
	    }
	    float d = val(inp[i].flow,x);
	    if(d > ans){
	      ans = d;
          //out << inp[i].flow << " " << x << endl;
	    }
	  }
	  //return;
	  float d= (ans * 10000000);
	  int x = floor(d/10.0);
	  out << x << endl;
	}
};


int main() {
	Problem1MilkPumping solver;
	std::ifstream in("pump.in");
	std::ofstream out("pump.out");
	solver.solve(in, out);
	return 0;
}
