/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>


#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
class Problem1Haircut {
public:
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    int arr[n];
    map<int,vector<int>> oc;
    for(int i = 0; i < n; i++){
      in >> arr[i];
      oc[arr[i]].push_back(i);
    }
    ordered_set s;
    int ans[n];
    for(int i = 0; i < n; i++){
      int x = s.order_of_key(n - arr[i]);
      s.insert(n - arr[i]);
      ans[i] = x;
    }
    long long cntr = 0;
    out << 0 << endl;
    for(int i = 0; i < n - 1; i++){
      long long del = 0;
      for(int j: oc[i]){
        del += ans[j];
      }
      cntr += del;
      out << cntr << endl;
    }
  }
};

int main() {
  ios_base::sync_with_stdio(false);
        cin.tie(NULL);
	Problem1Haircut solver;
        std::ifstream in("haircut.in");
	std::ofstream out("haircut.out");
	solver.solve(in, out);
	return 0;
}
