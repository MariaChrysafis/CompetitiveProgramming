/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cmath>
using namespace std;
class Problem2HelpYourself {
public:
  const int MOD = 1000000007;
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    pair<int,int> arr[n];
    int end[2 * n + 5];
    int start[2 * n + 5];
    long long pwr[2 * n + 5];
    pwr[0] = 1;
    for(int i = 0; i < 2 * n + 5; i++){
      start[i] = end[i] = 0;
      pwr[i + 1] = (pwr[i] * 2) % MOD;
    }
    for(int i = 0; i < n; i++){
      in >> arr[i].first >> arr[i].second;
      end[arr[i].second]++;
      start[arr[i].first]++;
    }
    int l = 0;
    int r = n;
    int counter = 0;
    for(int i = 0; i < 2 * n + 4; i++){
      //considering the interval [i, i + 1]
      l += end[i];
      r -= start[i + 1];
      long long left = pwr[l];
      long long a = pwr[start[i + 1]];
      long long b = pwr[r];
      long long right = ((a - 1) * b) % MOD;
      counter += (left * right) % MOD;
      counter %= MOD;
    }
    out << counter << endl;
  }
};


int main() {
	Problem2HelpYourself solver;
	std::ifstream in("help.in");
	std::ofstream out("help.out");
	solver.solve(in, out);
	return 0;
}
