/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <fstream>


#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem3StampPainting {
public:
  int MOD = pow(10,9) + 7;
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long N, M, K;
    in >> N >> M >> K;
    long long powr[N + 1]; /* this is going to store M^i */
    long long pref[N];
    powr[0] = 1;
    for(long long i = 1; i <= N; i++){
      powr[i] = powr[i - 1] * M;
      powr[i] %= MOD;
    }
    for(long long i = 0; i <= K - 2; i++){
      pref[i] = powr[i + 1];
    }
    pref[K - 1] = powr[K] - M;
    for(long long i = K; i < N; i++){
      pref[i] = M * pref[i - 1] - pref[i - K] * (M - 1);
      pref[i] %= MOD;
    }
    out << (powr[N] - pref[N - 1] + MOD) % MOD << endl;
  }
};

int main() {
  freopen("spainting.in", "r", stdin);
  freopen("spainting.out", "w", stdout);
	Problem3StampPainting solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
