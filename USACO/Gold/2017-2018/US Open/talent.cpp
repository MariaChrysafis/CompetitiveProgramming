/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem3TalentShow {
public:
  int N,W;
  struct cow{
    double weight;
    double talent;
    double ratio;
  };
  static bool comp(cow a, cow b){
    return a.ratio > b.ratio;
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    in >> N >> W;
    vector<cow> v;
    for(int i = 0; i < N; i++){
      double a,b;
      in >> a >> b;
      cow c;
      c.weight = a;
      c.talent = b;
      c.ratio = b/a;
      v.push_back(c);
    }
    int MAX = 250000;
    int DP[MAX]; /* gives max talent */
    DP[0] = 0;
    for(int i = 1; i < MAX; i++){
      DP[i] = -MAX;
    }
    for(int j = 0; j < N; j++) {
      for (int i = MAX; i >= 0; i--) {
        int x = v[j].weight;
        int y = v[j].talent;
        if(i + x >= MAX) continue;
        DP[i + x] = max(DP[i] + y,DP[i + x]);
      }
    }
    int myMax = 0;
    for(int i = W; i < MAX; i++){
      float talent = DP[i];
      float weight = i;
      int ans = (1000.0 * talent)/weight;
      myMax = max(ans,myMax);
    }
    out << myMax << endl;
  }
};


int main() {
	Problem3TalentShow solver;
	std::ifstream in("talent.in");
	std::ofstream out("talent.out");
	solver.solve(in, out);
	return 0;
}
