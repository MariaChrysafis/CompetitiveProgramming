/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

//Created by Maria Chrysafis
#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class Problem3TamingTheHerd {
public:
  int N;
  vector<int> arr;
  vector<int> pref;
  const static int MAX = 103;
  int dp[MAX][MAX][MAX];
  const int INF = 10000000;
  int fill(int i, int j, int k){
    /*
     * dp[i][j][k]
     * up until the ith index
     * the last value is j
     * the number of breakouts is k
     */
    if(j > i){
      return -INF;
    }
    if(i < 0 || j < 0 || k < 0){
      return -INF;
    }
    if(dp[i][j][k] != -INF){
      return dp[i][j][k];
    }
    if(k == 0){
      if(i != j){
        return -INF;
      }else{
        dp[i][j][k] = pref[i];
        return dp[i][j][k];
      }
    }
    if(j == 0){
      bool b = (arr[i] == 0);
      for(int a = 0; a < N; a++) {
        int x = fill(i - 1, a, k - 1) + b;
        if (x > dp[i][j][k]) {
          dp[i][j][k] = x;
        }
      }
      return dp[i][j][k];
    }
    dp[i][j][k] = fill(i - 1,j - 1, k) + (arr[i] == j);
    return dp[i][j][k];
  }
  void reset(){
    for(int i = 0; i < N; i++){
      for(int j = 0; j <= i; j++){
        for(int k = 0; k < N; k++){
          dp[i][j][k] = -INF;
        }
      }
    }
  }
  void solve(std::istream& in, std::ostream& out) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    in >> N;
    arr.resize(N);
    for(int i = 0; i < N; i++){
      in >> arr[i];
    }
    pref.resize(N);
    pref[0] = (arr[0] == 0);
    for(int i = 1; i < N; i++){
      pref[i] = pref[i - 1] + (arr[i] == i);
    }
    for(int i = 0; i < N; i++) {
      reset();
      int myMax = 0;
      for (int j = 0; j < N; j++) {
        myMax = max(fill(N - 1, j, i), myMax);
      }
      out << N - myMax << endl;
    }
  }
};


int main() {
	Problem3TamingTheHerd solver;
	std::ifstream in("taming.in");
	std::ofstream out("taming.out");
	solver.solve(in, out);
	return 0;
}
