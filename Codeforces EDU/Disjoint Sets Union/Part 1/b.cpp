/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
using namespace std;
class BDisjointSetsUnion2 {
public:
  vector<int> parent;
  vector<int> size;
  vector<int> minEl;
  vector<int> maxEl;
  struct myStruct{
    int a, b, c;
  };
  int get_parent(int u) {
    if (parent[u] == u) {
      return u;
    }
    return get_parent(parent[u]);
  }
  void unite(int a, int b) {
    a = get_parent(a);
    b = get_parent(b);
    if (a == b) {
      return;
    }
    if (size[a] > size[b]) {
      swap(a, b);
    }
    parent[a] = b;
    size[b] += size[a];
    maxEl[b] = max(maxEl[b],maxEl[a]);
    minEl[b] = min(minEl[b],minEl[a]);
  }
  myStruct get(int u){
    int x = get_parent(u);
    return {minEl[x],maxEl[x],size[x]};
  }
  void solve(std::istream &in, std::ostream &out) {
    int n, m;
    in >> n >> m;
    parent.resize(n);
    size.resize(n);
    minEl.resize(n);
    maxEl.resize(n);
    for (int i = 0; i < n; i++) {
      parent[i] = i;
      size[i] = 1;
      minEl[i] = maxEl[i] = i;
    }
    while (m--) {
      string s;
      in >> s;
      if (s == "union") {
        int u, v;
        in >> u >> v;
        u--;
        v--;
        unite(u, v);
      } else {
        int u;
        in >> u;
        u--;
        myStruct s = get(u);
        out << s.a + 1 << " " << s.b + 1 << " " << s.c << endl;
      }
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	BDisjointSetsUnion2 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
