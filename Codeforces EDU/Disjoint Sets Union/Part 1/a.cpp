/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
using namespace std;
class ADisjointSetsUnion {
public:
  vector<int> parent;
  vector<int> size;
  int get_parent (int u) {
    if(parent[u] == u){
      return u;
    }
    return get_parent(parent[u]);
  }
  void unite(int a, int b) {
    a = get_parent(a);
    b = get_parent(b);
    if(a == b){
      return;
    }
    if(size[a] > size[b]){
      swap(a,b);
    }
    parent[a] = b;
    size[b] += size[a];
  }
  void solve(std::istream &in, std::ostream &out){
    int n, m;
    in >> n >> m;
    parent.resize(n);
    size.resize(n);
    for(int i = 0; i < n; i++){
      parent[i] = i;
      size[i] = 1;
    }
    while(m--){
      string s;
      in >> s;
      int u, v;
      in >> u >> v;
      u--;
      v--;
      if(s == "union"){
        unite(u, v);
      }else{
        bool b = (get_parent(u) == get_parent(v));
        if(b){
          out << "YES" << endl;
        }else{
          out << "NO" << endl;
        }
      }
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	ADisjointSetsUnion solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
