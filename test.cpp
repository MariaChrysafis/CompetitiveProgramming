/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <fstream>


#include <vector>
#include <map>
#include <algorithm>
using namespace std;
class ECheapDinner {
public:
  const long long INF = 100000000000;
  const int MAXN = 150000;
  void solve(std::istream &in, std::ostream &out) {
    int n[4];
    in >> n[0] >> n[1] >> n[2] >> n[3];
    vector<vector<long long>> v;
    v.resize(4);
    for(int i = 0; i < 4; i++){
      v[i].resize(n[i]);
      for(int j = 0; j < n[i]; j++){
        in >> v[i][j];
      }
    }
    vector<vector<long long>> myMap[3];
    myMap[0].resize(MAXN);
    myMap[1].resize(MAXN);
    myMap[2].resize(MAXN);
    long long m[3];
    for(int i = 0; i < 3; i++){
      //in >> m[0] >> m[1] >> m[2];
      in >> m[i];
      for(int j = 0; j < m[i]; j++){
        long long a,b;
        in >> a >> b;
        a--;
        b--;
        myMap[i][a].push_back(b);
        //out << i << " " << a << endl;
      }
    }
    vector<vector<long long>> dp;
    dp.resize(4);
    for(int i = 0; i < 4; i++){
      dp[i].resize(n[i]);
      for(int j = 0; j < n[i]; j++){
        dp[i][j] = INF;
      }
    }
    for(int i = 0; i < n[0]; i++){
      dp[0][i] = v[0][i];
    }
    for(int i = 1; i < 4; i++){
      for(int j = 0; j < n[i]; j++){
        sort(myMap[i - 1][j].begin(),myMap[i - 1][j].end());
        long long x = 0;
        for(int k = 0; k < n[i - 1]; k++){
          if(!myMap[i - 1][j].empty() && k == myMap[i - 1][j][x]){
            x++;
            if(x == myMap[i - 1][j].size()){
              x = 0;
            }
            continue;
          }
          dp[i][j] = min(dp[i - 1][k] + v[i][j], dp[i][j]);
        }
      }
    }
    long long myMin = INF;
    for(int i = 0; i < n[3]; i++){
      myMin = min(myMin, dp[3][i]);
    }
    if(myMin == INF){
      out << -1 << endl;
      return;
    }
    out << myMin << endl;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	ECheapDinner solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
